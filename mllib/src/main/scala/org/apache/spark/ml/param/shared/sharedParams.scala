/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.spark.ml.param.shared

<<<<<<< HEAD
import org.apache.spark.annotation.DeveloperApi
import org.apache.spark.ml.param._
=======
import org.apache.spark.ml.param._
import org.apache.spark.util.Utils
>>>>>>> upstream/master

// DO NOT MODIFY THIS FILE! It was generated by SharedParamsCodeGen.

// scalastyle:off

/**
<<<<<<< HEAD
 * :: DeveloperApi ::
 * Trait for shared param regParam.
 */
@DeveloperApi
trait HasRegParam extends Params {

  /**
   * Param for regularization parameter.
   * @group param
   */
  final val regParam: DoubleParam = new DoubleParam(this, "regParam", "regularization parameter")

  /** @group getParam */
  final def getRegParam: Double = getOrDefault(regParam)
}

/**
 * :: DeveloperApi ::
 * Trait for shared param maxIter.
 */
@DeveloperApi
trait HasMaxIter extends Params {

  /**
   * Param for max number of iterations.
   * @group param
   */
  final val maxIter: IntParam = new IntParam(this, "maxIter", "max number of iterations")

  /** @group getParam */
  final def getMaxIter: Int = getOrDefault(maxIter)
}

/**
 * :: DeveloperApi ::
 * Trait for shared param featuresCol (default: "features").
 */
@DeveloperApi
trait HasFeaturesCol extends Params {
=======
 * (private[ml]) Trait for shared param regParam.
 */
private[ml] trait HasRegParam extends Params {

  /**
   * Param for regularization parameter (>= 0).
   * @group param
   */
  final val regParam: DoubleParam = new DoubleParam(this, "regParam", "regularization parameter (>= 0)", ParamValidators.gtEq(0))

  /** @group getParam */
  final def getRegParam: Double = $(regParam)
}

/**
 * (private[ml]) Trait for shared param maxIter.
 */
private[ml] trait HasMaxIter extends Params {

  /**
   * Param for maximum number of iterations (>= 0).
   * @group param
   */
  final val maxIter: IntParam = new IntParam(this, "maxIter", "maximum number of iterations (>= 0)", ParamValidators.gtEq(0))

  /** @group getParam */
  final def getMaxIter: Int = $(maxIter)
}

/**
 * (private[ml]) Trait for shared param featuresCol (default: "features").
 */
private[ml] trait HasFeaturesCol extends Params {
>>>>>>> upstream/master

  /**
   * Param for features column name.
   * @group param
   */
  final val featuresCol: Param[String] = new Param[String](this, "featuresCol", "features column name")

  setDefault(featuresCol, "features")

  /** @group getParam */
<<<<<<< HEAD
  final def getFeaturesCol: String = getOrDefault(featuresCol)
}

/**
 * :: DeveloperApi ::
 * Trait for shared param labelCol (default: "label").
 */
@DeveloperApi
trait HasLabelCol extends Params {
=======
  final def getFeaturesCol: String = $(featuresCol)
}

/**
 * (private[ml]) Trait for shared param labelCol (default: "label").
 */
private[ml] trait HasLabelCol extends Params {
>>>>>>> upstream/master

  /**
   * Param for label column name.
   * @group param
   */
  final val labelCol: Param[String] = new Param[String](this, "labelCol", "label column name")

  setDefault(labelCol, "label")

  /** @group getParam */
<<<<<<< HEAD
  final def getLabelCol: String = getOrDefault(labelCol)
}

/**
 * :: DeveloperApi ::
 * Trait for shared param predictionCol (default: "prediction").
 */
@DeveloperApi
trait HasPredictionCol extends Params {
=======
  final def getLabelCol: String = $(labelCol)
}

/**
 * (private[ml]) Trait for shared param predictionCol (default: "prediction").
 */
private[ml] trait HasPredictionCol extends Params {
>>>>>>> upstream/master

  /**
   * Param for prediction column name.
   * @group param
   */
  final val predictionCol: Param[String] = new Param[String](this, "predictionCol", "prediction column name")

  setDefault(predictionCol, "prediction")

  /** @group getParam */
<<<<<<< HEAD
  final def getPredictionCol: String = getOrDefault(predictionCol)
}

/**
 * :: DeveloperApi ::
 * Trait for shared param rawPredictionCol (default: "rawPrediction").
 */
@DeveloperApi
trait HasRawPredictionCol extends Params {
=======
  final def getPredictionCol: String = $(predictionCol)
}

/**
 * (private[ml]) Trait for shared param rawPredictionCol (default: "rawPrediction").
 */
private[ml] trait HasRawPredictionCol extends Params {
>>>>>>> upstream/master

  /**
   * Param for raw prediction (a.k.a. confidence) column name.
   * @group param
   */
  final val rawPredictionCol: Param[String] = new Param[String](this, "rawPredictionCol", "raw prediction (a.k.a. confidence) column name")

  setDefault(rawPredictionCol, "rawPrediction")

  /** @group getParam */
<<<<<<< HEAD
  final def getRawPredictionCol: String = getOrDefault(rawPredictionCol)
}

/**
 * :: DeveloperApi ::
 * Trait for shared param probabilityCol (default: "probability").
 */
@DeveloperApi
trait HasProbabilityCol extends Params {

  /**
   * Param for column name for predicted class conditional probabilities.
   * @group param
   */
  final val probabilityCol: Param[String] = new Param[String](this, "probabilityCol", "column name for predicted class conditional probabilities")
=======
  final def getRawPredictionCol: String = $(rawPredictionCol)
}

/**
 * (private[ml]) Trait for shared param probabilityCol (default: "probability").
 */
private[ml] trait HasProbabilityCol extends Params {

  /**
   * Param for Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities..
   * @group param
   */
  final val probabilityCol: Param[String] = new Param[String](this, "probabilityCol", "Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities.")
>>>>>>> upstream/master

  setDefault(probabilityCol, "probability")

  /** @group getParam */
<<<<<<< HEAD
  final def getProbabilityCol: String = getOrDefault(probabilityCol)
}

/**
 * :: DeveloperApi ::
 * Trait for shared param threshold.
 */
@DeveloperApi
trait HasThreshold extends Params {

  /**
   * Param for threshold in binary classification prediction.
   * @group param
   */
  final val threshold: DoubleParam = new DoubleParam(this, "threshold", "threshold in binary classification prediction")

  /** @group getParam */
  final def getThreshold: Double = getOrDefault(threshold)
}

/**
 * :: DeveloperApi ::
 * Trait for shared param inputCol.
 */
@DeveloperApi
trait HasInputCol extends Params {
=======
  final def getProbabilityCol: String = $(probabilityCol)
}

/**
 * (private[ml]) Trait for shared param threshold.
 */
private[ml] trait HasThreshold extends Params {

  /**
   * Param for threshold in binary classification prediction, in range [0, 1].
   * @group param
   */
  final val threshold: DoubleParam = new DoubleParam(this, "threshold", "threshold in binary classification prediction, in range [0, 1]", ParamValidators.inRange(0, 1))

  /** @group getParam */
  final def getThreshold: Double = $(threshold)
}

/**
 * (private[ml]) Trait for shared param inputCol.
 */
private[ml] trait HasInputCol extends Params {
>>>>>>> upstream/master

  /**
   * Param for input column name.
   * @group param
   */
  final val inputCol: Param[String] = new Param[String](this, "inputCol", "input column name")

  /** @group getParam */
<<<<<<< HEAD
  final def getInputCol: String = getOrDefault(inputCol)
}

/**
 * :: DeveloperApi ::
 * Trait for shared param inputCols.
 */
@DeveloperApi
trait HasInputCols extends Params {
=======
  final def getInputCol: String = $(inputCol)
}

/**
 * (private[ml]) Trait for shared param inputCols.
 */
private[ml] trait HasInputCols extends Params {
>>>>>>> upstream/master

  /**
   * Param for input column names.
   * @group param
   */
<<<<<<< HEAD
  final val inputCols: Param[Array[String]] = new Param[Array[String]](this, "inputCols", "input column names")

  /** @group getParam */
  final def getInputCols: Array[String] = getOrDefault(inputCols)
}

/**
 * :: DeveloperApi ::
 * Trait for shared param outputCol.
 */
@DeveloperApi
trait HasOutputCol extends Params {
=======
  final val inputCols: StringArrayParam = new StringArrayParam(this, "inputCols", "input column names")

  /** @group getParam */
  final def getInputCols: Array[String] = $(inputCols)
}

/**
 * (private[ml]) Trait for shared param outputCol (default: uid + "__output").
 */
private[ml] trait HasOutputCol extends Params {
>>>>>>> upstream/master

  /**
   * Param for output column name.
   * @group param
   */
  final val outputCol: Param[String] = new Param[String](this, "outputCol", "output column name")

<<<<<<< HEAD
  /** @group getParam */
  final def getOutputCol: String = getOrDefault(outputCol)
}

/**
 * :: DeveloperApi ::
 * Trait for shared param checkpointInterval.
 */
@DeveloperApi
trait HasCheckpointInterval extends Params {

  /**
   * Param for checkpoint interval.
   * @group param
   */
  final val checkpointInterval: IntParam = new IntParam(this, "checkpointInterval", "checkpoint interval")

  /** @group getParam */
  final def getCheckpointInterval: Int = getOrDefault(checkpointInterval)
}

/**
 * :: DeveloperApi ::
 * Trait for shared param fitIntercept (default: true).
 */
@DeveloperApi
trait HasFitIntercept extends Params {
=======
  setDefault(outputCol, uid + "__output")

  /** @group getParam */
  final def getOutputCol: String = $(outputCol)
}

/**
 * (private[ml]) Trait for shared param checkpointInterval.
 */
private[ml] trait HasCheckpointInterval extends Params {

  /**
   * Param for checkpoint interval (>= 1).
   * @group param
   */
  final val checkpointInterval: IntParam = new IntParam(this, "checkpointInterval", "checkpoint interval (>= 1)", ParamValidators.gtEq(1))

  /** @group getParam */
  final def getCheckpointInterval: Int = $(checkpointInterval)
}

/**
 * (private[ml]) Trait for shared param fitIntercept (default: true).
 */
private[ml] trait HasFitIntercept extends Params {
>>>>>>> upstream/master

  /**
   * Param for whether to fit an intercept term.
   * @group param
   */
  final val fitIntercept: BooleanParam = new BooleanParam(this, "fitIntercept", "whether to fit an intercept term")

  setDefault(fitIntercept, true)

  /** @group getParam */
<<<<<<< HEAD
  final def getFitIntercept: Boolean = getOrDefault(fitIntercept)
=======
  final def getFitIntercept: Boolean = $(fitIntercept)
}

/**
 * (private[ml]) Trait for shared param seed (default: this.getClass.getName.hashCode.toLong).
 */
private[ml] trait HasSeed extends Params {

  /**
   * Param for random seed.
   * @group param
   */
  final val seed: LongParam = new LongParam(this, "seed", "random seed")

  setDefault(seed, this.getClass.getName.hashCode.toLong)

  /** @group getParam */
  final def getSeed: Long = $(seed)
}

/**
 * (private[ml]) Trait for shared param elasticNetParam.
 */
private[ml] trait HasElasticNetParam extends Params {

  /**
   * Param for the ElasticNet mixing parameter, in range [0, 1]. For alpha = 0, the penalty is an L2 penalty. For alpha = 1, it is an L1 penalty..
   * @group param
   */
  final val elasticNetParam: DoubleParam = new DoubleParam(this, "elasticNetParam", "the ElasticNet mixing parameter, in range [0, 1]. For alpha = 0, the penalty is an L2 penalty. For alpha = 1, it is an L1 penalty.", ParamValidators.inRange(0, 1))

  /** @group getParam */
  final def getElasticNetParam: Double = $(elasticNetParam)
}

/**
 * (private[ml]) Trait for shared param tol.
 */
private[ml] trait HasTol extends Params {

  /**
   * Param for the convergence tolerance for iterative algorithms.
   * @group param
   */
  final val tol: DoubleParam = new DoubleParam(this, "tol", "the convergence tolerance for iterative algorithms")

  /** @group getParam */
  final def getTol: Double = $(tol)
}

/**
 * (private[ml]) Trait for shared param stepSize.
 */
private[ml] trait HasStepSize extends Params {

  /**
   * Param for Step size to be used for each iteration of optimization..
   * @group param
   */
  final val stepSize: DoubleParam = new DoubleParam(this, "stepSize", "Step size to be used for each iteration of optimization.")

  /** @group getParam */
  final def getStepSize: Double = $(stepSize)
>>>>>>> upstream/master
}
// scalastyle:on
